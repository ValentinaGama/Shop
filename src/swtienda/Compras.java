/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtienda;

import gestion.GestiónOperaciones;
import gestion.GestiónProductos;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import negocio.Producto;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import negocio.Operaciones;

/**
 *
 * @author valentina
 */
public class Compras extends javax.swing.JFrame implements ActionListener, ItemListener, MouseListener
{

   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Compras");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setForeground(new java.awt.Color(255, 0, 51));
        jButton2.setText("Regresar");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.lightGray, java.awt.Color.lightGray));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Organizar por:");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    
    private DefaultTableModel modelo;
    private Ppal ppal;
    GestiónOperaciones gestiProd=new GestiónOperaciones();
    
    //Métodos de servicio
    private void Listener()
    {
        
        this.jButton2.addActionListener(this);
        this.jComboBox1.addItemListener(this);
        this.jTable1.addMouseListener(this);
    }
    
    //Evento-Acción
    
    public Compras(Ppal ppal)
    {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.Listener();
        this.modelo=null;
        this.ppal=ppal;
        this.modelaTabla();
        this.LlenaCombo();
        this.traeProductos();
        
    }
    
    private void traeProductos()
    {
      
      ArrayList<Operaciones> produs=gestiProd.getTodos();
      System.out.print(produs.size());
      for(Operaciones prod: produs)
      {
          if(prod.getTipo()==1)
          {
          Vector fila=new Vector();
          fila.add(prod.getFactura());
          fila.add(prod.getFecha());
          fila.add(prod.getPersona());
          fila.add(prod.getTotal());
          if(prod.isPago()==true)
          fila.add("Crédito");
          else
          fila.add("Débito");
          this.modelo.addRow(fila);
          }
      }
    }
    
    private void accionBtnRegresar() 
    {
        this.setVisible(false);
        this.ppal.setVisible(true);
        
    }
    
    private void modelaTabla()
    {
        this.modelo= new DefaultTableModel();
        this.jTable1.setModel(modelo);
        
        this.modelo.addColumn("Factura");
        this.modelo.addColumn("Fecha");
        this.modelo.addColumn("Proveedor");
        this.modelo.addColumn("Total");
        this.modelo.addColumn("Pago");
          
    }

    private void LlenaCombo()
    {
        this.jComboBox1.addItem("Seleccione");
        this.jComboBox1.addItem("Factura");
        this.jComboBox1.addItem("Fecha");
        this.jComboBox1.addItem("Proveedor");
        this.jComboBox1.addItem("Total");
        this.jComboBox1.addItem("Pago");
    }
     private void organizar(int op)
    {
       ArrayList<Operaciones> produs=gestiProd.getTodos(); 
        
        if(op==1) 
            Collections.sort(produs,Comparator.comparing(Operaciones::getFactura));
        if(op==2) 
            Collections.sort(produs,Comparator.comparing(Operaciones::getFecha));
        if(op==3) 
            Collections.sort(produs,Comparator.comparing(Operaciones::getPersona));
        if(op==4) 
            Collections.sort(produs,Comparator.comparing(Operaciones::getTotal)); 
        if(op==5) 
            Collections.sort(produs,Comparator.comparing(Operaciones::isPago)); 
        
        this.ord(produs);
    }
    
    private void ord(ArrayList <Operaciones> produs)
    {
      this.limpiar();
      for(Operaciones prod: produs)
      {
          if(prod.getTipo()==1)
          {
            Vector fila=new Vector();
            fila.add(prod.getFactura());
            fila.add(prod.getFecha());
            fila.add(prod.getPersona());
            fila.add(prod.getTotal());
            if(prod.isPago()==true)
            fila.add("Crédito");
            else
            fila.add("Débito");
            this.modelo.addRow(fila);
          }
      }
    }
    
    private void limpiar()
    {
        int a =modelo.getRowCount()-1;
        for(int i=a; i>=0; i--)
        {
            modelo.removeRow(i );
        }
    }
    
    private void tablaPone()
    { 
        int seleccionada;
        String dato;
        float tot;
        seleccionada=this.jTable1.getSelectedRow();
        
        dato=this.jTable1.getValueAt(seleccionada,0).toString();
        tot=Float.parseFloat(this.jTable1.getValueAt(seleccionada,3).toString());
        
        PanelFactura1 xxx= new PanelFactura1(this, dato, tot);
    }
    //====================================================
    @Override
    public void actionPerformed(ActionEvent evento)
    {
        
        if(evento.getSource()==this.jButton2)
        {
            this.accionBtnRegresar();
        }
        
    }

    @Override
    public void itemStateChanged(ItemEvent e) 
    {
        if(e.getSource()==this.jComboBox1)
        {
            int i=this.jComboBox1.getSelectedIndex();
            if(i>0)
                this.organizar(i);
        } 
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) 
    {
        if(e.getSource()==this.jTable1)
        {
            this.tablaPone();
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
}

